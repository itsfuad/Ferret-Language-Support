{
  "name": "RET",
  "scopeName": "source.ret",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#tables"
    },
    {
      "include": "#keys"
    },
    {
      "include": "#values"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.number-sign.ret",
          "match": "\\s*(#).*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.ret"
            }
          }
        }
      ]
    },
    "tables": {
      "patterns": [
        {
          "name": "entity.name.section.ret",
          "match": "^\\s*(\\[)([^\\[\\]]+)(\\])\\s*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.table.ret"
            },
            "2": {
              "name": "entity.name.table.ret"
            },
            "3": {
              "name": "punctuation.definition.table.ret"
            }
          }
        },
        {
          "name": "entity.name.section.ret",
          "match": "^\\s*(\\[\\[)([^\\[\\]]+)(\\]\\])\\s*$",
          "captures": {
            "1": {
              "name": "punctuation.definition.table-array.ret"
            },
            "2": {
              "name": "entity.name.table.ret"
            },
            "3": {
              "name": "punctuation.definition.table-array.ret"
            }
          }
        }
      ]
    },
    "keys": {
      "patterns": [
        {
          "match": "^\\s*([A-Za-z_][A-Za-z0-9_-]*)\\s*(=)",
          "captures": {
            "1": {
              "name": "variable.other.key.ret"
            },
            "2": {
              "name": "punctuation.separator.key-value.ret"
            }
          }
        },
        {
          "match": "^\\s*(\"[^\"]*\")\\s*(=)",
          "captures": {
            "1": {
              "name": "variable.other.key.ret string.quoted.double.ret"
            },
            "2": {
              "name": "punctuation.separator.key-value.ret"
            }
          }
        }
      ]
    },
    "values": {
      "patterns": [
        {
          "include": "#strings"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#booleans"
        },
        {
          "include": "#arrays"
        },
        {
          "include": "#inline-tables"
        },
        {
          "include": "#datetimes"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.ret",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.ret",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.single.ret",
          "begin": "'",
          "end": "'"
        },
        {
          "name": "string.quoted.triple.ret",
          "begin": "\"\"\"",
          "end": "\"\"\"",
          "patterns": [
            {
              "name": "constant.character.escape.ret",
              "match": "\\\\."
            }
          ]
        },
        {
          "name": "string.quoted.triple.ret",
          "begin": "'''",
          "end": "'''"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.integer.ret",
          "match": "\\b[-+]?[0-9][0-9_]*\\b"
        },
        {
          "name": "constant.numeric.float.ret",
          "match": "\\b[-+]?[0-9][0-9_]*\\.[0-9_]*([eE][-+]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.hex.ret",
          "match": "\\b0x[0-9A-Fa-f][0-9A-Fa-f_]*\\b"
        },
        {
          "name": "constant.numeric.octal.ret",
          "match": "\\b0o[0-7][0-7_]*\\b"
        },
        {
          "name": "constant.numeric.binary.ret",
          "match": "\\b0b[01][01_]*\\b"
        },
        {
          "name": "constant.numeric.infinity.ret",
          "match": "\\b[-+]?inf\\b"
        },
        {
          "name": "constant.numeric.nan.ret",
          "match": "\\bnan\\b"
        }
      ]
    },
    "booleans": {
      "name": "constant.language.boolean.ret",
      "match": "\\b(true|false)\\b"
    },
    "arrays": {
      "name": "meta.array.ret",
      "begin": "\\[",
      "end": "\\]",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.array.begin.ret"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.array.end.ret"
        }
      },
      "patterns": [
        {
          "include": "#values"
        },
        {
          "include": "#comments"
        },
        {
          "name": "punctuation.separator.array.ret",
          "match": ","
        }
      ]
    },
    "inline-tables": {
      "name": "meta.inline-table.ret",
      "begin": "\\{",
      "end": "\\}",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.inline-table.begin.ret"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.inline-table.end.ret"
        }
      },
      "patterns": [
        {
          "include": "#keys"
        },
        {
          "include": "#values"
        },
        {
          "name": "punctuation.separator.inline-table.ret",
          "match": ","
        }
      ]
    },
    "datetimes": {
      "patterns": [
        {
          "name": "constant.other.datetime.ret",
          "match": "\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|[-+]\\d{2}:\\d{2})"
        },
        {
          "name": "constant.other.date.ret",
          "match": "\\d{4}-\\d{2}-\\d{2}"
        },
        {
          "name": "constant.other.time.ret",
          "match": "\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?"
        }
      ]
    }
  }
}
